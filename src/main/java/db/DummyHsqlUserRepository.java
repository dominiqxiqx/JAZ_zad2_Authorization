package db;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;

import javax.servlet.http.HttpServletRequest;

import domain.User;
import domain.UserPrivillege;

public class DummyHsqlUserRepository implements UserRepository{
	
	private Connection connection;
	private String url = "jdbc:hsqldb:hsql://localhost/workdb";
	
	private String createTableUser = "CREATE TABLE User(id bigint GENERATED BY DEFAULT AS IDENTITY, username varchar(50), password varchar(50), email varchar(50), privillege varchar(20))";
	
	private Statement statement;
	
	public DummyHsqlUserRepository() throws SQLException{
			
	}
	
	//inicjacja obiekt√≥w connection i statement
	public void initDb() throws SQLException{
		this.connection = getConnection();
		this.statement = createStatement();
	}
	
	//ustanowienie polaczenia
	public Connection getConnection() throws SQLException{
		this.connection = DriverManager.getConnection(url);
		return connection;
	}
	
	//przygotowanie obiektu statement dla polecen SQL
	public Statement createStatement() throws SQLException{
		this.statement = this.connection.createStatement();
		return statement;
	}
	
	//utworzenie tabeli
	public void createTableUser()  throws SQLException{
				
		ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
		boolean tableExist = false;
		while(rs.next()) {
			if("User".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
				tableExist = true;
				break;
			}
		}
		
		if (!tableExist) {
			statement.executeUpdate(createTableUser);
		}
	}
	
	//dodaje pojedynczego uzytkownika do bazy
	@Override
	public void add(User user) throws SQLException {
		String addUserSql = "INSERT INTO User (username, password, email, privillege) VALUES (?, ?, ?, ?)";
		PreparedStatement addUserStmt;
		addUserStmt = connection.prepareStatement(addUserSql);
		addUserStmt.setString(1, user.getUsername());
		addUserStmt.setString(2, user.getPassword());
		addUserStmt.setString(3, user.getEmail());
		addUserStmt.setString(4, user.getPrivillege());
		addUserStmt.executeUpdate();
	}
	
	//zwraca liste wszystkich uzytkownikow z bazy
	@Override
	public ArrayList<User> getAll() throws SQLException{
		String getAllUserSql = "SELECT * FROM User";
		PreparedStatement getAllUserStmt;
		getAllUserStmt = connection.prepareStatement(getAllUserSql);
		ResultSet rs;
		rs = getAllUserStmt.executeQuery();
		
		ArrayList<User> list = new ArrayList<User>();
		while(rs.next()) {
			User user = new User();
			user.setUsername(rs.getString("username"));
			user.setPassword(rs.getString("password"));
			user.setEmail(rs.getString("email"));
			user.setPrivillege(rs.getString("privillege"));
			list.add(user);
		}
		
		return list;
	}
	
	//zwraca uzytkownika o zadanym imieniu
	@Override
	public User getUser(String name) throws SQLException{
		this.connection = this.getConnection();
		this.statement = this.createStatement();
		String getUserSql = "SELECT * FROM User WHERE username=" + name;
		PreparedStatement getUserStmt;
		getUserStmt = connection.prepareStatement(getUserSql);
		ResultSet rs;
		rs = getUserStmt.executeQuery();
		
		User user = new User();
		user.setUsername(rs.getString("username"));
		user.setPassword(rs.getString("password"));
		user.setEmail(rs.getString("email"));
		user.setPrivillege(rs.getString("privillege"));
		
		return user;
	}
	
	//zwraca haslo uzytkownika dla podanej nazwy
	@Override
	public String getPassword(String name) throws SQLException{
		String getPasswordSql = "SELECT password FROM User WHERE username=" + name;
		PreparedStatement getPasswordStmt;
		getPasswordStmt = connection.prepareStatement(getPasswordSql);
		ResultSet rs;
		rs = getPasswordStmt.executeQuery();
		
		String password;
		password = rs.getString("password");
				
		return password;
	}
	
	//zwraca email uzytkownika dla podanej nazwy
		@Override
		public String getEmail(String name) throws SQLException{
			String getEmailSql = "SELECT eamil FROM User WHERE username=" + name;
			PreparedStatement getEmailStmt;
			getEmailStmt = connection.prepareStatement(getEmailSql);
			ResultSet rs;
			rs = getEmailStmt.executeQuery();
			
			String email;
			email = rs.getString("email");
					
			return email;
		}
		
		//zwraca obiekt uzytkownika na podstawie danych podanych w formularzu rejestracji
		public User retrieveUserFromRequest(HttpServletRequest request) {
			User user = new User();
			user.setUsername(request.getParameter("username"));
			user.setPassword(request.getParameter("password"));
			user.setEmail(request.getParameter("email"));
			user.setPrivillege(UserPrivillege.anonymous.toString());
			return user;
		}

		
}
